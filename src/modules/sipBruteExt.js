// Generated by CoffeeScript 1.6.3
/*

Copyright (C) 2013, Jesus Perez <jesusprubio gmail com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var AsteroidsConn, Grammar, Parser, Printer, SipBruteExt, SipMessage, Utils, fs;

SipMessage = require("../tools/sipMessage.coffee").SipMessage;

AsteroidsConn = require("../tools/asteroidsConn.coffee").AsteroidsConn;

Parser = require("../tools/parser.coffee").Parser;

Printer = require("../tools/printer.coffee").Printer;

Utils = require("../tools/utils.coffee").Utils;

Grammar = require("../tools/grammar").Grammar;

fs = require("fs");

exports.SipBruteExt = SipBruteExt = (function() {
  var oneEnum, parseReply, printIsVuln;

  function SipBruteExt() {}

  printIsVuln = function(isVuln) {
    if (isVuln) {
      return Printer.highlight("\nThe target could be vulnerable to this vector\n");
    } else {
      return Printer.highlight("\nThe target seems NOT to be vulnerable to this vector\n");
    }
  };

  parseReply = function(msg, testExt) {
    var code;
    code = Parser.parseCode(msg);
    switch (code) {
      case "401":
      case "407":
        return Printer.printEnum(testExt, "Auth");
      case "200":
        return Printer.printEnum(testExt, "Open");
      default:
        Printer.highlight("Last tested (not valid) extension ");
        Printer.normal("\"" + testExt + "\"\n");
        return Printer.removeCursor();
    }
  };

  oneEnum = function(target, port, path, srcHost, transport, type, testExt) {
    var conn, lport, msgObj, msgSend;
    lport = Utils.randomPort();
    msgObj = new SipMessage(type, "", target, port, srcHost, lport, testExt, "", transport, "", "", "", false, "", "", "", "", "", "");
    msgSend = String(msgObj.create());
    conn = new AsteroidsConn(target, port, path, transport, lport);
    conn.on("newMessage", function(stream) {
      return parseReply(stream, testExt);
    });
    conn.on("error", function(error) {
      return Printer.error("SipBruteExt: " + error);
    });
    return conn.send(msgSend);
  };

  SipBruteExt.run = function(target, port, path, srcHost, transport, type, rangeExt, delay) {
    var conn, lport, msgObj, msgSend;
    if (/:/.test(target)) {
      target = Utils.normalize6(target);
    }
    lport = Utils.randomPort();
    msgObj = new SipMessage(type, "", target, port, srcHost, lport, "olakease", "", transport, "", "", "", false, "", "", "", "", "", "");
    msgSend = String(msgObj.create());
    conn = new AsteroidsConn(target, port, path, transport, lport);
    conn.send(msgSend);
    conn.on("newMessage", function(stream) {
      var code, doLoopNum, rangeExtParsed,
        _this = this;
      code = Parser.parseCode(stream);
      if (code === "401" || code === "407") {
        return printIsVuln(false);
      } else if (code === "404") {
        printIsVuln(true);
        if (Grammar.extRangeRE.exec(rangeExt)) {
          rangeExtParsed = Parser.parseExtRange(rangeExt);
          doLoopNum = function(i) {
            return setTimeout(function() {
              oneEnum(target, port, path, srcHost, transport, type, i);
              if (i < rangeExtParsed.maxExt) {
                return doLoopNum(parseInt(i, 10) + 1);
              }
            }, delay);
          };
          return doLoopNum(rangeExtParsed.minExt);
        } else {
          if (Grammar.fileRE.exec(rangeExt)) {
            return fs.readFile(rangeExt, function(err, data) {
              var doLoopString, extensions, splitData,
                _this = this;
              if (err) {
                return Printer.error("sipBruteExt: " + err);
              } else {
                extensions = data;
                splitData = data.toString().split("\n");
                doLoopString = function(i) {
                  return setTimeout(function() {
                    oneEnum(target, port, path, srcHost, transport, type, splitData[i]);
                    if (i < splitData.length - 1) {
                      return doLoopString(i + 1);
                    }
                  }, delay);
                };
                return doLoopString(0);
              }
            });
          } else {
            return oneEnum(target, port, path, srcHost, transport, type, rangeExt);
          }
        }
      }
    });
    return conn.on('error', function(error) {
      return Printer.error("SipBruteExt: " + error);
    });
  };

  return SipBruteExt;

})();

// Generated by CoffeeScript 1.6.3
/*

Copyright (C) 2013, Jesus Perez <jesusprubio gmail com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var AsteroidsConn, Grammar, MaxMind, Parser, Printer, Shodan, SipMessage, SipScan, Utils;

SipMessage = require("../tools/sipMessage.coffee").SipMessage;

AsteroidsConn = require("../tools/asteroidsConn.coffee").AsteroidsConn;

Parser = require("../tools/parser.coffee").Parser;

Printer = require("../tools/printer.coffee").Printer;

Utils = require("../tools/utils.coffee").Utils;

Shodan = require("./shodan").Shodan;

MaxMind = require("./maxMind").MaxMind;

Grammar = require("../tools/grammar").Grammar;

exports.SipScan = SipScan = (function() {
  var getFingerPrint, oneScan, printCveDetails, printScanInfo, printScanInfoLite;

  function SipScan() {}

  printScanInfo = function(info) {
    Printer.infoHigh("\n\nFINGERPRINT =>\n");
    Printer.info("\nService: ");
    Printer.result(info.service);
    Printer.info("\nVersion: ");
    Printer.result(info.version);
    Printer.info("\nMessage:\n");
    return Printer.normal(info.message);
  };

  printScanInfoLite = function(info, target) {
    Printer.info("\nIP address: ");
    Printer.result(target);
    Printer.info(", Service: ");
    Printer.result(info.service);
    Printer.info(", Version: ");
    Printer.result(info.version);
    Printer.info("\nMessage:\n");
    return Printer.normal(info.message);
  };

  printCveDetails = function(service) {
    Printer.infoHigh("\nCVE DETAILS =>\n\n");
    return Printer.result('http://www.cvedetails.com/product-search.php?vendor_id=0&search=' + service + '\n');
  };

  getFingerPrint = function(msg) {
    var fingerprint, ser, ver;
    fingerprint = Parser.parseServer(msg) || Parser.parseUserAgent(msg) || Parser.parseOrg(msg);
    ser = "";
    ver = "";
    if (fingerprint) {
      ser = Parser.parseService(fingerprint);
      ver = Parser.parseVersion(fingerprint);
    }
    return {
      service: ser,
      version: ver,
      message: msg
    };
  };

  oneScan = function(target, port, path, srcHost, transport, type, shodanKey, isRange) {
    var conn, lport, msgObj, msgSend;
    lport = Utils.randomPort();
    msgObj = new SipMessage(type, "", target, port, srcHost, lport, "", "", transport, "", "", "", false, "", "", "", "", "", "");
    msgSend = String(msgObj.create());
    conn = new AsteroidsConn(target, port, path, transport, lport);
    conn.on("newMessage", function(stream) {
      var output;
      output = getFingerPrint(stream);
      if (isRange) {
        if (output.message) {
          return printScanInfoLite(output, target);
        }
      } else {
        if (output) {
          printScanInfo(output);
        }
        Printer.infoHigh("\nGEOLOCATION =>\n");
        MaxMind.locate(target);
        if (output.service) {
          printCveDetails(output.service);
          if (shodanKey !== "") {
            Printer.infoHigh("\nVULNERABILITIES AND EXPLOITS =>\n\n");
            return Shodan.searchVulns(output.service, output.version, shodanKey);
          }
        }
      }
    });
    conn.on("error", function(error) {
      if (!isRange) {
        return Printer.error(error);
      }
    });
    conn.send(msgSend);
    Printer.highlight("Last tested target (not answering) ");
    Printer.normal("" + target + "\n");
    return Printer.removeCursor();
  };

  SipScan.run = function(target, port, path, srcHost, transport, type, shodanKey, delay) {
    var blockSeparator, doLoop, firstBlock, initHost, lastBlock, netBlocks, raddix, splittedHost, splittedTarget,
      _this = this;
    Printer.normal("\n");
    if (/-/.exec(target)) {
      splittedTarget = target.split("-");
      initHost = splittedTarget[0];
      lastBlock = splittedTarget[1];
      if (/:/.test(initHost)) {
        initHost = Utils.normalize6(initHost);
        blockSeparator = ":";
        raddix = 16;
      } else {
        blockSeparator = ".";
        raddix = 10;
      }
      splittedHost = initHost.split("" + blockSeparator);
      netBlocks = splittedHost.slice(0, +(splittedHost.length - 2) + 1 || 9e9).join("" + blockSeparator);
      firstBlock = splittedHost[splittedHost.length - 1];
      doLoop = function(i) {
        return setTimeout(function() {
          var targetI;
          targetI = "" + netBlocks + blockSeparator + (i.toString(raddix));
          oneScan(targetI, port, path, srcHost, transport, type, shodanKey, true);
          if (parseInt(i, 10) < parseInt(lastBlock, raddix)) {
            return doLoop(parseInt(i, 10) + 1);
          }
        }, delay);
      };
      return doLoop(parseInt(firstBlock, raddix));
    } else {
      if (/:/.test(target)) {
        target = Utils.normalize6(target);
      }
      return oneScan(target, port, path, srcHost, transport, type, shodanKey, false);
    }
  };

  return SipScan;

})();

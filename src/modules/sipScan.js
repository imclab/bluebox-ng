// Generated by CoffeeScript 1.6.3
/*

Copyright (C) 2013, Jesus Perez <jesusprubio gmail com>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

var AsteroidsConn, EventEmitter, Grammar, MaxMind, Parser, Printer, Shodan, SipMessage, SipScan, Utils, fs, _ref,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SipMessage = require("../tools/sipMessage.coffee").SipMessage;

AsteroidsConn = require("../tools/asteroidsConn.coffee").AsteroidsConn;

Parser = require("../tools/parser.coffee").Parser;

Printer = require("../tools/printer.coffee").Printer;

Utils = require("../tools/utils.coffee").Utils;

Shodan = require("./shodan").Shodan;

MaxMind = require("./maxMind").MaxMind;

Grammar = require("../tools/grammar").Grammar;

EventEmitter = require("events").EventEmitter;

fs = require("fs");

exports.SipScan = SipScan = (function(_super) {
  var getFingerPrint, oneScan, printCveDetails, printScanInfo, printScanInfoLite, scan,
    _this = this;

  __extends(SipScan, _super);

  function SipScan() {
    _ref = SipScan.__super__.constructor.apply(this, arguments);
    return _ref;
  }

  SipScan.emitter = new EventEmitter;

  printScanInfo = function(info) {
    Printer.infoHigh("\n\nFINGERPRINT =>\n");
    Printer.info("\nService: ");
    Printer.result(info.service);
    Printer.info("\nVersion: ");
    Printer.result(info.version);
    Printer.info("\nMessage:\n");
    return Printer.normal(info.message);
  };

  printScanInfoLite = function(info, target) {
    Printer.info("\nIP address: ");
    Printer.result(target);
    Printer.info(", Service: ");
    Printer.result(info.service);
    Printer.info(", Version: ");
    Printer.result(info.version);
    Printer.info(", Message:\n");
    return Printer.normal(info.message);
  };

  printCveDetails = function(service) {
    Printer.infoHigh("\nCVE DETAILS =>\n\n");
    return Printer.result('http://www.cvedetails.com/product-search.php?vendor_id=0&search=' + service + '\n');
  };

  getFingerPrint = function(msg) {
    var fingerprint, ser, ver;
    fingerprint = Parser.parseServer(msg) || Parser.parseUserAgent(msg) || Parser.parseOrg(msg);
    ser = "";
    ver = "";
    if (fingerprint) {
      ser = Parser.parseService(fingerprint);
      ver = Parser.parseVersion(fingerprint);
    }
    return {
      service: ser,
      version: ver,
      message: msg
    };
  };

  oneScan = function(target, port, path, srcHost, transport, type, shodanKey, isRange) {
    var conn, lport, msgObj, msgSend;
    lport = Utils.randomPort();
    msgObj = new SipMessage(type, "", target, port, srcHost, lport, "", "", transport, "", "", "", false, "", "", "", "", "", "");
    msgSend = String(msgObj.create());
    conn = new AsteroidsConn(target, port, path, transport, lport);
    conn.on("newMessage", function(stream) {
      var output;
      output = getFingerPrint(stream);
      if (isRange) {
        if (output.message) {
          return printScanInfoLite(output, target);
        }
      } else {
        if (output) {
          printScanInfo(output);
        }
        Printer.infoHigh("\nGEOLOCATION =>\n");
        MaxMind.locate(target);
        if (output.service) {
          printCveDetails(output.service);
          if (shodanKey !== "") {
            Printer.infoHigh("\nVULNERABILITIES AND EXPLOITS =>\n\n");
            return Shodan.searchVulns(output.service, output.version, shodanKey);
          }
        }
      }
    });
    conn.on("error", function(error) {
      if (!isRange) {
        return Printer.error(error);
      }
    });
    conn.send(msgSend);
    if (isRange) {
      Printer.highlight("Last tested target ");
      Printer.normal("" + target + ":" + port + "\n");
      return Printer.removeCursor();
    }
  };

  scan = function(target, port, path, srcHost, transport, type, shodanKey, delay, isRange) {
    var doLoopNum, doLoopString, initPort, lastPort, portsList, splittedPort;
    if (/-/.exec(port)) {
      splittedPort = port.split("-");
      initPort = splittedPort[0];
      lastPort = splittedPort[1];
      doLoopNum = function(i) {
        return setTimeout(function() {
          oneScan(target, i, path, srcHost, transport, type, "", true);
          if (parseInt(i, 10) < parseInt(lastPort, 10)) {
            return doLoopNum(parseInt(i, 10) + 1);
          } else {
            return SipScan.emitter.emit("portBlockEnd", "Block of ports ended");
          }
        }, delay);
      };
      return doLoopNum(initPort);
    } else {
      if (/,/.exec(port)) {
        portsList = port.split(",");
        doLoopString = function(i) {
          return setTimeout(function() {
            oneScan(target, portsList[i], path, srcHost, transport, type, "", true);
            if (i < portsList.length - 1) {
              return doLoopString(parseInt(i, 10) + 1);
            } else {
              return SipScan.emitter.emit("portBlockEnd", "Block of ports ended");
            }
          }, delay);
        };
        return doLoopString(0);
      } else {
        if (isRange) {
          isRange;
        }
        oneScan(target, port, path, srcHost, transport, type, shodanKey, isRange);
        return SipScan.emitter.emit("portBlockEnd", "Block of ports ended");
      }
    }
  };

  SipScan.run = function(target, port, path, srcHost, transport, type, shodanKey, delay) {
    var blockSeparator, i, initHost, lastBlock, netBlocks, raddix, splittedHost, splittedTarget, targetI,
      _this = this;
    Printer.normal("\n");
    if (/-/.exec(target)) {
      splittedTarget = target.split("-");
      initHost = splittedTarget[0];
      lastBlock = splittedTarget[1];
      if (/:/.test(initHost)) {
        initHost = Utils.normalize6(initHost);
        blockSeparator = ":";
        raddix = 16;
      } else {
        blockSeparator = ".";
        raddix = 10;
      }
      splittedHost = initHost.split("" + blockSeparator);
      netBlocks = splittedHost.slice(0, +(splittedHost.length - 2) + 1 || 9e9).join("" + blockSeparator);
      i = parseInt(splittedHost[splittedHost.length - 1], 10);
      this.emitter.on("portBlockEnd", function(msg) {
        var _this = this;
        return setTimeout((function() {
          var targetI;
          if (i < parseInt(lastBlock, raddix)) {
            i += 1;
            targetI = "" + netBlocks + blockSeparator + (i.toString(raddix));
            return scan(targetI, port, path, srcHost, transport, type, "", delay, true);
          }
        }), delay);
      });
      targetI = "" + netBlocks + blockSeparator + (i.toString(raddix));
      return scan(targetI, port, path, srcHost, transport, type, "", delay, true);
    } else {
      if (Grammar.fileRE.exec(target)) {
        return fs.readFile(target, function(err, data) {
          var splitData;
          if (err) {
            return Printer.error("sipScan: readFile(): " + err);
          } else {
            i = 0;
            splitData = data.toString().split("\n");
            _this.emitter.on("portBlockEnd", function(msg) {
              var _this = this;
              return setTimeout((function() {
                if (i < (splitData.length - 1)) {
                  i += 1;
                  return scan(splitData[i], port, path, srcHost, transport, type, "", delay, true);
                }
              }), delay);
            });
            return scan(splitData[i], port, path, srcHost, transport, type, "", delay["true"]);
          }
        });
      } else {
        if (/:/.test(target)) {
          target = Utils.normalize6(target);
        }
        return scan(target, port, path, srcHost, transport, type, shodanKey, delay, false);
      }
    }
  };

  return SipScan;

}).call(this, EventEmitter);
